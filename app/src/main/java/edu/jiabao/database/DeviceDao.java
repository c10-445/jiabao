package edu.jiabao.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, Long.class, "device_id", true, "_id");
        public final static Property Turn_on = new Property(1, boolean.class, "turn_on", false, "TURN_ON");
        public final static Property Degree = new Property(2, Long.class, "degree", false, "DEGREE");
        public final static Property Run_model = new Property(3, Long.class, "run_model", false, "RUN_MODEL");
        public final static Property Fan_state = new Property(4, Long.class, "fan_state", false, "FAN_STATE");
        public final static Property Wind_size = new Property(5, Long.class, "wind_size", false, "WIND_SIZE");
        public final static Property User_id = new Property(6, Long.class, "user_id", false, "USER_ID");
        public final static Property Device_name = new Property(7, String.class, "device_name", false, "DEVICE_NAME");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: device_id
                "\"TURN_ON\" INTEGER NOT NULL ," + // 1: turn_on
                "\"DEGREE\" INTEGER," + // 2: degree
                "\"RUN_MODEL\" INTEGER," + // 3: run_model
                "\"FAN_STATE\" INTEGER," + // 4: fan_state
                "\"WIND_SIZE\" INTEGER," + // 5: wind_size
                "\"USER_ID\" INTEGER," + // 6: user_id
                "\"DEVICE_NAME\" TEXT);"); // 7: device_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
        stmt.bindLong(2, entity.getTurn_on() ? 1L: 0L);
 
        Long degree = entity.getDegree();
        if (degree != null) {
            stmt.bindLong(3, degree);
        }
 
        Long run_model = entity.getRun_model();
        if (run_model != null) {
            stmt.bindLong(4, run_model);
        }
 
        Long fan_state = entity.getFan_state();
        if (fan_state != null) {
            stmt.bindLong(5, fan_state);
        }
 
        Long wind_size = entity.getWind_size();
        if (wind_size != null) {
            stmt.bindLong(6, wind_size);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(8, device_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
        stmt.bindLong(2, entity.getTurn_on() ? 1L: 0L);
 
        Long degree = entity.getDegree();
        if (degree != null) {
            stmt.bindLong(3, degree);
        }
 
        Long run_model = entity.getRun_model();
        if (run_model != null) {
            stmt.bindLong(4, run_model);
        }
 
        Long fan_state = entity.getFan_state();
        if (fan_state != null) {
            stmt.bindLong(5, fan_state);
        }
 
        Long wind_size = entity.getWind_size();
        if (wind_size != null) {
            stmt.bindLong(6, wind_size);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(8, device_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // device_id
            cursor.getShort(offset + 1) != 0, // turn_on
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // degree
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // run_model
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // fan_state
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // wind_size
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // device_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTurn_on(cursor.getShort(offset + 1) != 0);
        entity.setDegree(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRun_model(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFan_state(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setWind_size(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDevice_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setDevice_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getDevice_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

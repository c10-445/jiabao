package edu.jiabao.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Integer> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, int.class, "device_id", true, "DEVICE_ID");
        public final static Property Turn_on = new Property(1, boolean.class, "turn_on", false, "TURN_ON");
        public final static Property Degree = new Property(2, int.class, "degree", false, "DEGREE");
        public final static Property Pattern = new Property(3, int.class, "pattern", false, "PATTERN");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"DEVICE_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: device_id
                "\"TURN_ON\" INTEGER NOT NULL ," + // 1: turn_on
                "\"DEGREE\" INTEGER NOT NULL ," + // 2: degree
                "\"PATTERN\" INTEGER NOT NULL );"); // 3: pattern
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDevice_id());
        stmt.bindLong(2, entity.getTurn_on() ? 1L: 0L);
        stmt.bindLong(3, entity.getDegree());
        stmt.bindLong(4, entity.getPattern());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDevice_id());
        stmt.bindLong(2, entity.getTurn_on() ? 1L: 0L);
        stmt.bindLong(3, entity.getDegree());
        stmt.bindLong(4, entity.getPattern());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.getInt(offset + 0), // device_id
            cursor.getShort(offset + 1) != 0, // turn_on
            cursor.getInt(offset + 2), // degree
            cursor.getInt(offset + 3) // pattern
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setDevice_id(cursor.getInt(offset + 0));
        entity.setTurn_on(cursor.getShort(offset + 1) != 0);
        entity.setDegree(cursor.getInt(offset + 2));
        entity.setPattern(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Device entity, long rowId) {
        return entity.getDevice_id();
    }
    
    @Override
    public Integer getKey(Device entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

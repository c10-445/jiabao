package edu.jiabao.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATOR".
*/
public class OperatorDao extends AbstractDao<Operator, Integer> {

    public static final String TABLENAME = "OPERATOR";

    /**
     * Properties of entity Operator.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Operator_id = new Property(0, int.class, "operator_id", true, "OPERATOR_ID");
        public final static Property Operator_name = new Property(1, String.class, "operator_name", false, "OPERATOR_NAME");
        public final static Property Folder_id = new Property(2, int.class, "folder_id", false, "FOLDER_ID");
        public final static Property User_id = new Property(3, int.class, "user_id", false, "USER_ID");
        public final static Property Content_list = new Property(4, String.class, "content_list", false, "CONTENT_LIST");
    }

    private final StringConverter content_listConverter = new StringConverter();

    public OperatorDao(DaoConfig config) {
        super(config);
    }
    
    public OperatorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATOR\" (" + //
                "\"OPERATOR_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: operator_id
                "\"OPERATOR_NAME\" TEXT," + // 1: operator_name
                "\"FOLDER_ID\" INTEGER NOT NULL ," + // 2: folder_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: user_id
                "\"CONTENT_LIST\" TEXT);"); // 4: content_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Operator entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOperator_id());
 
        String operator_name = entity.getOperator_name();
        if (operator_name != null) {
            stmt.bindString(2, operator_name);
        }
        stmt.bindLong(3, entity.getFolder_id());
        stmt.bindLong(4, entity.getUser_id());
 
        List content_list = entity.getContent_list();
        if (content_list != null) {
            stmt.bindString(5, content_listConverter.convertToDatabaseValue(content_list));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Operator entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOperator_id());
 
        String operator_name = entity.getOperator_name();
        if (operator_name != null) {
            stmt.bindString(2, operator_name);
        }
        stmt.bindLong(3, entity.getFolder_id());
        stmt.bindLong(4, entity.getUser_id());
 
        List content_list = entity.getContent_list();
        if (content_list != null) {
            stmt.bindString(5, content_listConverter.convertToDatabaseValue(content_list));
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Operator readEntity(Cursor cursor, int offset) {
        Operator entity = new Operator( //
            cursor.getInt(offset + 0), // operator_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // operator_name
            cursor.getInt(offset + 2), // folder_id
            cursor.getInt(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : content_listConverter.convertToEntityProperty(cursor.getString(offset + 4)) // content_list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Operator entity, int offset) {
        entity.setOperator_id(cursor.getInt(offset + 0));
        entity.setOperator_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFolder_id(cursor.getInt(offset + 2));
        entity.setUser_id(cursor.getInt(offset + 3));
        entity.setContent_list(cursor.isNull(offset + 4) ? null : content_listConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Operator entity, long rowId) {
        return entity.getOperator_id();
    }
    
    @Override
    public Integer getKey(Operator entity) {
        if(entity != null) {
            return entity.getOperator_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Operator entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
